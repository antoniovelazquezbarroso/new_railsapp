#!/usr/bin/env bash

# SEE https://gist.github.com/sudara/8653130

# This monit wrapper script will be called by monit as root
# Edit these variables to your liking

# SCRIPT puma TO BE PLACED AT /usr/local/bin/puma WITH COMMANDS TO MANAGE PUMA
# Usage: puma {start|stop|restart|phased-restart|kill_worker 0,1,etc} [requires sudo rights]
# SEE https://gist.github.com/sudara/8653130
# AND /playbooks/railsapp/set_puma.yml
# AND /playbooks/common/monit/templates/service_checks/puma.j2

RAILS_ENV={{ app_environment.RAILS_ENV }}
USER={{ app_user }}
APP_DIR=/opt/{{ app_name }}      # FOR DEPLOYMENT WITH playbooks/railsapp/deploy.yml           
# APP_DIR=/opt/{{ app_name }}/current  # FOR DEPLOYMENT WITH CAPISTRANO
PUMA_CONFIG_FILE=$APP_DIR/config/puma.rb
PUMA_PID_FILE=$APP_DIR/tmp/pids/puma.pid
#PUMA_SOCKET=$APP_DIR/tmp/sockets/puma.sock        # IF USING SOCKET

# check if puma process is running
puma_is_running() {
#  if [ -S $PUMA_SOCKET ] ; then           # IF USING SOCKET
    if [ -e $PUMA_PID_FILE ] ; then
      if cat $PUMA_PID_FILE | xargs pgrep -P > /dev/null ; then
        return 0
      else
        echo "No puma process found"
      fi
    else
      echo "No puma pid file found"
    fi
#  else                                    # IF USING SOCKET
#    echo "No puma socket found"           # IF USING SOCKET
#  fi                                      # IF USING SOCKET

  return 1
}

case "$1" in
  start)
    echo "Starting puma..."
#    rm -f $PUMA_SOCKET                    # IF USING SOCKET

    if [ -e $PUMA_CONFIG_FILE ] ; then
      echo "cd $APP_DIR && RAILS_ENV=$RAILS_ENV bundle exec puma -C $PUMA_CONFIG_FILE"
      /bin/su - $USER -c "cd $APP_DIR && RAILS_ENV=$RAILS_ENV bundle exec puma -C $PUMA_CONFIG_FILE"
    else
      echo "No config file found"
      /bin/su - $USER -c "cd $APP_DIR && RAILS_ENV=$RAILS_ENV bundle exec puma --daemon --bind unix://$PUMA_SOCKET --pidfile $PUMA_PID_FILE" # IF USING SOCKET
    fi

    echo "done"
    ;;

  stop)
    echo "Stopping puma..."
      kill -s SIGTERM `cat $PUMA_PID_FILE`
      rm -f $PUMA_PID_FILE
#      rm -f $PUMA_SOCKET                   # IF USING SOCKET

    echo "done"
    ;;

  restart)
    if puma_is_running ; then
      echo "Hot-restarting puma..."
      kill -s SIGUSR2 `cat $PUMA_PID_FILE`

      echo "Doublechecking the process restart..."
      sleep 15
      if puma_is_running ; then
        echo "done"
        exit 0
      else
        echo "Puma restart failed :/"
      fi
    fi
    ;;
  
  phased-restart)
    if puma_is_running ; then
      echo "Phased-restarting puma..."
      kill -s SIGUSR1 `cat $PUMA_PID_FILE`

      echo "Doublechecking the process restart..."
      sleep 10
      if puma_is_running ; then
        echo "done"
        exit 0
      else
        echo "Puma restart failed :/"
      fi
    fi
    ;;

  kill_worker*)
    if [ -z "$2" ];then  
      logger -t "puma_${APP_DIR}" -s "kill_worker called with no worker identifier"
      exit 1 
    fi
    PID_DIR=`dirname $PUMA_PID_FILE`      
    kill -s QUIT `cat ${PID_DIR}/puma_worker_$2.pid`
    STATUS=$?
    exit $STATUS
    ;;

  *)
    echo "Usage: sudo puma {start|stop|restart|phased-restart|kill_worker 0,1,etc}" >&2
    ;;
esac
