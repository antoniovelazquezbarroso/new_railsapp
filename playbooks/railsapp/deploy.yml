---
- hosts: app
  become: yes

  vars_files:
    - vars.yml
  
  handlers:
    # If repo_gitignored_files are changed when no changes in the git repo
    - name: restart puma
      command: "puma restart"
      when: app_updated.changed == false

    - name: restart nginx
      service: name=nginx state=restarted
      delegate_to: "{{ groups['web'][0] }}"

  tasks:
    - name: Ensure app directory exists and is writeable.
      file:
        path: "{{ app_directory }}"
        state: directory
        owner: "{{ app_user }}"
        group: "{{ app_user }}"
        mode: 0755

    - name: Ensure app code is cloned from git_repository at correct release.
      git:
        repo: "{{ git_repository }}" # Git repository where the app lives.
        version: "{{ git_version }}" # To choose version repository to checkout
                                     # (can be a branch name, tag name or SHA-1 hash)
                                     # defaults to the literal string HEAD. 
        dest: "{{ app_directory }}"
        accept_hostkey: true
        force: yes
      register: app_updated
      notify: restart nginx

    # SET CONFIG FILES GITIGNORED IN THE RAILSAPP GIT REPOSITORY
    - import_tasks: repo_gitignored_files.yml

    - name: Install required dependencies with bundler.
      shell: "bundle install --path vendor/bundle chdir={{ app_directory }}"
      when: app_updated.changed == true
      notify: restart nginx

    - name: Perform deployment-related database rake tasks (ONLY ONCE PER APP SERVER GROUP).
      shell: "{{ item }} chdir={{ app_directory }}"
      with_items:
        - bundle exec rake db:migrate
        - bundle exec rake db:seed
      environment: "{{app_environment}}"
      when: app_updated.changed == true and inventory_hostname == groups.app[0]

    - name: Perform deployment-related assets rake tasks (ON EACH APP SERVER).
      shell: "{{ item }} chdir={{ app_directory }}"
      with_items:
        - bundle exec rake assets:precompile
      environment: "{{app_environment}}"
      when: app_updated.changed == true

    - name: Ensure demo application has correct user for files.
      file:
        path: "{{ app_directory }}"
        state: directory
        owner: "{{ app_user }}"
        group: "{{ app_user }}"
        recurse: yes
      changed_when: False

    - name: Ensure puma pids & socket folders exist and writeable.
      file:
        path: "{{ app_directory }}/tmp/{{ item }}"
        state: directory
        owner: "{{ app_user }}"
        group: "{{ app_user }}"
        mode: 0755
      with_items:
        - pids
        - sockets
  
    - name: Copy puma_commands script to server.
      template:
        src: puma_commands.sh.j2
        dest: /usr/local/bin/puma
        owner: root
        group: root
        mode: 0755

    # This task will do nothing if puma not running before, but will stop it if running,
    # avoiding errors with "ADDRESS ALREADY IN USE" when running the playbook
    - name: Stop Puma server (if it was running when changes were made to git repo)
      command: "puma stop"
      when: app_updated.changed == true

    - name: Start Puma server.
      become: yes
      shell: "bundle exec puma -C {{ app_directory }}/config/puma.rb chdir={{ app_directory }}"
      when: app_updated.changed == true
